#include <stdio.h>
#include <stdbool.h>

#define SIZE 9

bool isValid(int board[SIZE][SIZE], int row, int col, int num) {
    for (int x = 0; x < SIZE; x++) {
        if (board[row][x] == num || board[x][col] == num ||
            board[row - row % 3 + x / 3][col - col % 3 + x % 3] == num)
            return false;
    }
    return true;
}

bool solveSudoku(int board[SIZE][SIZE]) {
    int row = -1, col = -1;
    bool empty = false;

    for (int i = 0; i < SIZE && !empty; i++) {
        for (int j = 0; j < SIZE && !empty; j++) {
            if (board[i][j] == 0) {
                row = i;
                col = j;
                empty = true;
            }
        }
    }

    if (!empty) return true; // Đã hoàn thành

    for (int num = 1; num <= 9; num++) {
        if (isValid(board, row, col, num)) {
            board[row][col] = num;
            if (solveSudoku(board)) return true;
            board[row][col] = 0; // backtrack
        }
    }
    return false; // không tìm được số phù hợp
}

void printBoard(int board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        if (i % 3 == 0 && i != 0) printf("---------------------\n");
        for (int j = 0; j < SIZE; j++) {
            if (j % 3 == 0 && j != 0) printf("| ");
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int board[SIZE][SIZE] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    printf("Original Sudoku Board:\n");
    printBoard(board);

    if (solveSudoku(board)) {
        printf("\nSolved Sudoku Board:\n");
        printBoard(board);
    } else {
        printf("No solution exists.\n");
    }

    return 0;
}
